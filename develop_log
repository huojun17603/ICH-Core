开发日志
[2017-12-22]:
(1)
CoreService.executeCallback() 的返回拦截只作用于HttpResponse参数，下面的关联性修改
CallbackService.execute() 的返回拦截只作用于HttpResponse参数
CoreController 新增 String callback(String callback,HttpResponse response) 方法 替代原有方法进行返回拦截
(2)
增加服务端国际化功能
开发思路：一般语言的提现分为视图和数据两个层面。
视图上：一般会因为语言不通导致页面结构无法兼容，所以都会选择开发新的页面来解决这个问题。
数据上：数据库是不存在语言上的问题的，主要的问题是代码中的字符串。而针对于我们的开发结构，则主要是信息提示。
我们选择使用配置文件配置语言，把这些都写入内存中方便使用。如果需要修改则必须重启服务器
替换地点：返回拦截器InternationalCallbackServiceImpl，统一错误处理CoreController
[2017-12-25]
（1）
新增通用类型ICategory【扩展包】
支持平级和树形结构，使用attr进行字段扩展
（2）
新增意见反馈【扩展包】
（3）
新增用户举报【扩展包】
[2017-12-26]
(1)
新增通用型审核【扩展包】
(2)
新增文件及图片管理业务
在分布式下，图片文件的管理都会交给图片服务器处理
图片管理
图片一般保存在可以被直接访问的地方，并存在压缩、裁剪、水印等操作
通用的操作流程：用户上传图片后，服务器返回图片信息及路径，然后在表单保存的时候再把保存路径保存在表单中
设计思路：
1.独立表管理：因为保存对象与图片本身关系的不确定，所以设计为全部都是多对多的关系，使用同一张表同一保存及管理
2.图片操作：图片的操作一般在保存之前，所以就不提供操作业务了，只保留最终用户想要的结果
3.垃圾处理：前提条件是所有有效的图片都必须保存在数据库中，每天清理不在数据库中的图片。因为用户操作中会产生许多无效图片
文件管理：
其操作都交由视图层处理

[2018-1-16]
ILogInterceptor
新增请求参数打印
要求配置：OUT-REQUEST=1

[2018-1-18]
发现通用的审核表也可以作为处理记录表使用

[2018-5-9]
新增数据跑批任务监控